{"generator":"Code Snippets v3.6.2","date_created":"2024-01-30 08:24","snippets":[{"id":32,"name":"filter_authors_comments_list","code":"function wpse_filter_authors_comments_list( $clauses, $wp_comment_query ) {\n    global $pagenow, $wpdb;\n\n    \/\/ Ensure we are in the admin area and on the edit-comments.php page\n    if ( is_admin() && $pagenow == 'edit-comments.php' && !current_user_can( 'administrator' ) && current_user_can( 'author' ) ) {\n        \/\/ Get the current user's ID\n        $user_id = get_current_user_id();\n\n        \/\/ Modify the join and where clauses\n        $clauses['join'] = \"\n            LEFT JOIN $wpdb->posts ON $wpdb->posts.ID = $wpdb->comments.comment_post_ID\n        \";\n        $clauses['where'] .= $wpdb->prepare( \" AND (\n            $wpdb->posts.post_author = %d OR\n            $wpdb->comments.user_id = %d\n        )\", $user_id, $user_id );\n    }\n\n    return $clauses;\n}\n\n\/\/ Hook the function into 'comments_clauses'\nadd_filter( 'comments_clauses', 'wpse_filter_authors_comments_list', 10, 2 );","active":true,"modified":"2024-01-19 02:54:33","revision":"3"},{"id":6,"name":"restrict_comments_view_to_authors","code":"add_filter( 'comments_array', 'gp_restrict_comments_view_to_authors', 10, 2 );\n\nfunction gp_restrict_comments_view_to_authors( $comments, $post_id ) {\n    \/\/ If the user is viewing their own post, show all comments\n    if ( user_can( get_current_user_id(), 'edit_post', $post_id ) ) {\n        return $comments;\n    }\n\n    \/\/ Otherwise, return an empty array so no comments are shown\n    return array();\n}","active":true,"modified":"2024-01-22 07:29:26","revision":"4"},{"id":7,"name":"remove_reply_link","code":"function remove_reply_link( $link, $args, $comment, $post ) {\n    return ''; \/\/ This will replace the reply link with an empty string.\n}\nadd_filter( 'comment_reply_link', 'remove_reply_link', 10, 4 );","active":true,"modified":"2024-01-02 12:30:00","revision":"2"},{"id":8,"name":"message_sent","code":"\/\/ Start a session to store a flag when a comment is posted\nfunction start_session_if_none() {\n    if (!session_id()) {\n        session_start();\n    }\n}\nadd_action('init', 'start_session_if_none');\n\n\/\/ Set a session variable when a comment is posted\nfunction set_comment_posted_flag($comment_ID, $comment_approved) {\n    if ($comment_approved) {\n        \/\/ Set the session variable\n        $_SESSION['comment_posted'] = true;\n    }\n}\nadd_action('comment_post', 'set_comment_posted_flag', 10, 2);\n\n\/\/ Add an action to check for the session variable and display the popup message\nfunction display_comment_thank_you() {\n    \/\/ Check if the session variable is set\n    if (isset($_SESSION['comment_posted']) && $_SESSION['comment_posted']) {\n        \/\/ Display a thank you message\n        echo '<div class=\"comment-thank-you-popup\" style=\"display: none; position: fixed; top: 20%; left: 50%; transform: translateX(-50%); z-index: 9999; padding: 40px; border:solid 5px red; background: #fccfcf; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); border-radius: 5px;\">';\n        echo '<p><strong>Thanks, your message has been sent.<\/strong><\/p>';\n        echo '<button onclick=\"this.parentNode.style.display=\\'none\\';\">Close<\/button>';\n        echo '<\/div>';\n        echo \"<script>document.querySelector('.comment-thank-you-popup').style.display='block';<\/script>\";\n\n        \/\/ Unset the session variable so the message doesn't appear again\n        unset($_SESSION['comment_posted']);\n    }\n}\nadd_action('wp_footer', 'display_comment_thank_you');","active":true,"modified":"2024-01-24 03:18:20","revision":"19"},{"id":9,"name":"limit_user_comments_per_post","desc":"<p>function limit_user_comments_per_post( $comment_post_ID ) {<br \/>\/\/ Check if the commenter is a logged-in user<br \/>if ( is_user_logged_in() ) {<br \/>\/\/ Get the current user's ID<br \/>$current_user_id = get_current_user_id();<\/p>\n<p>\/\/ Get all comments for the current post made by the user<br \/>$args = array(<br \/>'user_id' =&gt; $current_user_id,<br \/>'post_id' =&gt; $comment_post_ID,<br \/>'count' =&gt; true \/\/ We only need the count<br \/>);<br \/>$user_comments_count = get_comments( $args );<\/p>\n<p>\/\/ If the user has already made 2 comments on this post, stop them from commenting again<br \/>if ( $user_comments_count &gt;= 2 ) {<br \/>wp_die( 'You have reached the limit of 2 messages for this person. &lt;a href=\"javascript:history.back()\"&gt;Go Back&lt;\/a&gt;' );<br \/>}<br \/>}<br \/>}<\/p>\n<p>\/\/ Add the function to the pre_comment_on_post action<br \/>add_action( 'pre_comment_on_post', 'limit_user_comments_per_post' );<\/p>","code":"function limit_user_comments_per_post( $comment_post_ID ) {\n    \/\/ Check if the commenter is a logged-in user who is not an administrator\n    if ( is_user_logged_in() && !current_user_can('administrator') ) {\n        \/\/ Get the post's author ID\n        $post_author_id = get_post_field( 'post_author', $comment_post_ID );\n        \n        \/\/ Check if the author of the post has the 'administrator' role\n        $post_author = get_user_by('id', $post_author_id);\n        if ( isset($post_author->roles) && in_array('administrator', (array) $post_author->roles) ) {\n            \/\/ If the post author is an administrator, do not limit comments\n            return;\n        }\n\n        \/\/ Get the current user's ID\n        $current_user_id = get_current_user_id();\n\n        \/\/ Get all comments for the current post made by the user\n        $args = array(\n            'user_id' => $current_user_id,\n            'post_id' => $comment_post_ID,\n            'count'   => true \/\/ We only need the count\n        );\n        $user_comments_count = get_comments( $args );\n\n        \/\/ If the user has already made 2 comments on this post, stop them from commenting again\n        if ( $user_comments_count >= 2 ) {\n            wp_die( 'You have reached the limit of 2 messages on this post. Your messages will be deleted when they are 7 days old (after which you will be able to send another message). <a href=\"javascript:history.back()\">Go Back<\/a>' );\n        }\n    }\n}\n\n\/\/ Add the function to the pre_comment_on_post action\nadd_action( 'pre_comment_on_post', 'limit_user_comments_per_post' );\n\n\n","active":true,"modified":"2024-01-26 06:21:36","revision":"24"},{"id":15,"name":"disable_comments_for_author","code":"function disable_comments_for_author($open, $post_id) {\n    if (is_single() && is_user_logged_in()) {\n        $post = get_post($post_id);\n        $current_user = wp_get_current_user();\n\n        if ($post->post_author == $current_user->ID) {\n            \/\/ Disable the comments for the author\n            $open = false;\n            \/\/ Remove the \"comments are closed\" message\n            add_filter('gettext', 'remove_comments_are_closed_message', 10, 3);\n        }\n    }\n    return $open;\n}\n\nfunction remove_comments_are_closed_message($translated_text, $untranslated_text, $domain) {\n    if ($untranslated_text === 'Comments are closed.') {\n        $translated_text = ''; \/\/ Change this to whatever string you prefer, or leave it empty to remove the message\n    }\n    return $translated_text;\n}\n\nadd_filter('comments_open', 'disable_comments_for_author', 10, 2);","active":true,"modified":"2024-01-03 10:31:56","revision":"9"},{"id":16,"name":"custom_remove_logged_in_as_text","code":"function custom_remove_logged_in_as_text($defaults) {\n    \/\/ Check if user is logged in and the 'logged_in_as' parameter is set\n    if (is_user_logged_in() && isset($defaults['logged_in_as'])) {\n        \/\/ Empty the 'logged_in_as' parameter\n        $defaults['logged_in_as'] = '';\n    }\n    return $defaults;\n}\nadd_filter('comment_form_defaults', 'custom_remove_logged_in_as_text');\n","active":true,"modified":"2024-01-03 14:05:27","revision":"8"},{"id":22,"name":"wp_link_to_current_user_first_post","code":"function my_theme_enqueue_styles() {\n    wp_enqueue_style('dashicons');\n}\nadd_action('wp_enqueue_scripts', 'my_theme_enqueue_styles');\n\nfunction wp_link_to_current_user_first_post() {\n    \/\/ Check if the user is logged in\n    if (is_user_logged_in()) {\n        \/\/ Get the current user's ID\n        $current_user_id = get_current_user_id();\n\n        \/\/ Set up the arguments for retrieving the user's posts\n        $args = array(\n            'author'        => $current_user_id, \/\/ Only get posts from the current user\n            'posts_per_page' => 1, \/\/ Limit to one post\n            'orderby'       => 'date', \/\/ Order by post date\n            'order'         => 'ASC', \/\/ Start with the earliest\n        );\n\n        \/\/ Get the posts\n        $posts = get_posts($args);\n\n        \/\/ Check if posts exist\n        if (!empty($posts)) {\n            \/\/ Get the permalink of the first post\n            $first_post_url = get_permalink($posts[0]->ID);\n\n            \/\/ Output the link to the first post\n           echo '<a href=\"' . esc_url($first_post_url) . '\" class=\"dashicons-before\"><button><span style=\"font-size:20px;\">Your Post<\/span><span style=\"font-size:15px;\"><br \/>view messages, edit post<\/span><\/button><\/a>';\n        } else {\n            echo '<a href=\"https:\/\/usernames.au\/wp-admin\/\" class=\"dashicons-before\"><button><span style=\"font-size:20px;\">Dashboard<\/span><span style=\"font-size:15px;\"><br \/>edit post<\/span><\/button><\/a>';\n        }\n    } else {\n        echo '';\n    }\n}","active":true,"modified":"2024-01-28 02:17:39","revision":"40"},{"id":23,"name":"replace_comment_with_message","code":"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nis_admin() && add_filter('gettext', function ($translation, $text, $domain) {\n    if (strpos($translation, 'comment') !== FALSE) {\n        return str_replace('comment', 'message', $translation);\n    }\n    if (strpos($translation, 'Comment') !== FALSE) {\n        return str_replace('Comment', 'Message', $translation);\n    }\n\n    return $translation;\n}, 101, 88);\n\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nfunction custom_gettext( $translated_text, $untranslated_text, $domain )\n{       \n    if( FALSE !== stripos( $untranslated_text, 'comment' ) )\n    {\n            $translated_text = str_ireplace( 'Comment', 'Message', $untranslated_text ) ;\n    }\n    return $translated_text;\n}\n\nis_admin() && add_filter( 'gettext', 'custom_gettext', 99, 93 );\n\n\/************ \nadd_filter('comment_form_defaults', 'ocean_custom_comment_title', 20);\nfunction ocean_custom_comment_title( $defaults ){\n$defaults['title_reply'] = __('Leave a message...', 'customizr-child');\nreturn $defaults;\n}\n****************\/\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nadd_filter( 'generate_leave_comment','tu_custom_leave_comment' );\nfunction tu_custom_leave_comment() {\n    return 'Leave a message';\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ \nfunction change_comment_form_submit_label($arg) {\n  $arg['label_submit'] = 'Send message';\n  return $arg;\n}\nadd_filter('comment_form_defaults', 'change_comment_form_submit_label', 11);\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nfunction my_custom_comment_text_above_fields() {\n    echo '<p class=\"custom-text\">Limit of 2 messages (Messages older than 7 days are deleted)<\/p>';\n}\nadd_action('comment_form_top', 'my_custom_comment_text_above_fields');","active":true,"modified":"2024-01-24 03:33:10","revision":"21"},{"id":29,"name":"edit_post_link_for_author_shortcode","code":"function wpse_edit_post_link_for_author_shortcode() {\n    \/\/ Make sure we are in the loop and the global $post variable is set\n    if ( in_the_loop() && is_a( $GLOBALS['post'], 'WP_Post' ) ) {\n        $post_id = get_the_ID();\n        $post_type = get_post_type( $post_id );\n\n        \/\/ Check if the current user has permission to edit the post\n        if ( current_user_can( 'edit_post', $post_id ) ) {\n            \/\/ Generate the edit post link\n            $edit_link = get_edit_post_link( $post_id );\n            if ( $edit_link ) {\n                \/\/ Display the edit link\n                return '<a href=\"' . esc_url( $edit_link ) . '\"><button> Edit <\/button><\/a>';\n            }\n        }\n    }\n\n    \/\/ If the edit link is not available, return an empty string\n    return '';\n}\n\n\/\/ Register the shortcode with WordPress\nadd_shortcode( 'edit_post_link_for_author', 'wpse_edit_post_link_for_author_shortcode' );","active":true,"modified":"2024-01-19 09:30:07","revision":"4"},{"id":30,"name":"CSS admin and hide stuff","code":"function wpse_custom_admin_css_for_non_admins() {\n    \/\/ Check if the current user is not an administrator\n    if ( !current_user_can( 'administrator' ) ) {\n        \/\/ Output the custom CSS styles\n        echo '<style type=\"text\/css\">\n\t\t\n.custom-status-text {margin:0% 10% 5% 10%;}\n\t\t\n#wp-content-wrap,#titlediv,#generate_layout_options_meta_box,#screen-meta-links,#misc-publishing-actionsxxx,#post-status-info,.user-description-wrap, .application-passwords, .user-rich-editing-wrap, .user-comment-shortcuts-wrap, \n .misc-pub-visibility, .misc-pub-revisions, .curtime, .search-filter-notice-v3-coming-soon, #menu-tools, #menu-comments, #tagsdiv-gender, .search-box, .tablenav, .subsubsub, li#wp-admin-bar-new-content.menupop, #wp-admin-bar-comments, #wp-admin-bar-wp-logo, tr.user-first-name-wrap, tr.user-last-name-wrap, tr.user-nickname-wrap, tr.user-display-name-wrap, #formatdiv, #categorydiv, #tagsdiv-post_tag, #tagsdiv-gender, #postimagediv, #footer-thankyou, #footer-upgrade, .notice notice-warning, tr.user-admin-color-wrap, tr.show-admin-bar, tr.user-language-wrap, tr.user-url-wrap, .view, .row-actions, .comments, #menu-posts, #slim-seo, #minor-publishing-actions, #toplevel_page_slimview1\n  { display: none;}\n\n        <\/style>';\n    }\n}\n\n\/\/ Hook into the 'admin_head' action\nadd_action( 'admin_head', 'wpse_custom_admin_css_for_non_admins' );\nfunction remove_items_from_admin_bar($wp_admin_bar) {\n    \/\/ Remove the WordPress logo and its submenus\n    $wp_admin_bar->remove_node('wp-logo');\n    \/\/ Remove the \"New\" menu (Quick Draft \/ New Post \/ New Page \/ New CPT)\n    $wp_admin_bar->remove_node('new-content');\n    \/\/ Remove the \"Comments\" menu\n    $wp_admin_bar->remove_node('comments');\n}\n\nadd_action('admin_bar_menu', 'remove_items_from_admin_bar', 999);","active":true,"modified":"2024-01-28 12:45:53","revision":"149"},{"id":31,"name":"author_posts_only","code":"\n\nfunction wpse_author_posts_only( $query ) {\n    \/\/ Check if we're in the admin area, on the main query, and if the current user is not an administrator\n    if ( is_admin() && $query->is_main_query() && !current_user_can( 'administrator' ) ) {\n        \/\/ Get the current user's ID\n        $user_id = get_current_user_id();\n\n        \/\/ If the user is an author and not allowed to edit other's posts, modify the query to return only the user's posts\n        if ( current_user_can( 'author' ) && !current_user_can( 'edit_others_posts' ) ) {\n            \/\/ Set the author parameter to the current user's ID\n            $query->set( 'author', $user_id );\n        }\n    }\n}\n\n\/\/ Hook the function into 'pre_get_posts'\nadd_action( 'pre_get_posts', 'wpse_author_posts_only' );","active":true,"modified":"2024-01-19 05:04:17","revision":"4"},{"id":26,"name":"link_comment_author_to_first_post","code":"function link_comment_author_to_first_post( $author_link, $author, $comment_ID ) {\n    $comment = get_comment( $comment_ID );\n\n    \/\/ Check if the comment has a valid user ID.\n    if ( $comment->user_id > 0 ) {\n        \/\/ Get the user by user ID.\n        $user = get_userdata( $comment->user_id );\n\n        \/\/ If the user exists, create a link to the author's first post.\n        if ( $user ) {\n            \/\/ Query for the user's posts.\n            $args = array(\n                'author' => $comment->user_id,\n                'posts_per_page' => 1,\n                'order' => 'ASC',\n                'orderby' => 'date',\n            );\n\n            $first_post = get_posts( $args );\n\n            \/\/ If there are posts, link to the first one.\n            if ( !empty($first_post) ) {\n                $first_post_url = get_permalink( $first_post[0]->ID );\n                $author_user_login = $user->display_name; \/\/ Use the user's display name.\n                $author_link = '<a href=\"' . esc_url( $first_post_url ) . '\" rel=\"external nofollow ugc\" class=\"url\">' . esc_html( $author_user_login ) . '<\/a>';\n            }\n        }\n    }\n\n    return $author_link;\n}\nadd_filter( 'get_comment_author_link', 'link_comment_author_to_first_post', 10, 3 );","active":true,"modified":"2024-01-20 17:12:04","revision":"10"},{"id":34,"name":"restrict_author_to_one_post","code":"\/\/ Hide the 'Add New' button on the Posts screen if the user already has one post including trashed posts\nfunction wpse_restrict_author_to_one_post() {\n    if (current_user_can('author') && !current_user_can('administrator')) {\n        \/\/ Query the number of posts the author has including trashed posts\n        $args = array(\n            'author'        => get_current_user_id(),\n            'post_type'     => 'post',\n            'post_status'   => array('publish', 'pending', 'draft', 'trash'),\n            'fields'        => 'ids', \/\/ We only need the IDs to count the posts\n        );\n        $user_posts = get_posts($args);\n\n        if (count($user_posts) >= 1) {\n            \/\/ Use CSS to hide the 'Add New' button\n            echo '<style type=\"text\/css\">\n                .page-title-action { display: none !important; }\n            <\/style>';\n            \/\/ Remove the \"Add New\" submenu item from the Posts menu\n            remove_submenu_page('edit.php', 'post-new.php');\n        }\n    }\n}\nadd_action('admin_head', 'wpse_restrict_author_to_one_post');\n\n\/\/ Prevent authors from accessing the new post page if they already have one post including trashed posts\nfunction wpse_prevent_new_post_access() {\n    global $pagenow;\n\n    \/\/ Check if we're on the 'Add New Post' page\n    if ('post-new.php' === $pagenow) {\n        if (current_user_can('author') && !current_user_can('administrator')) {\n            \/\/ Query the number of posts the author has including trashed posts\n            $args = array(\n                'author'        => get_current_user_id(),\n                'post_type'     => 'post',\n                'post_status'   => array('publish', 'pending', 'draft', 'trash'),\n                'fields'        => 'ids', \/\/ We only need the IDs to count the posts\n            );\n            $user_posts = get_posts($args);\n\n            if (count($user_posts) >= 1) {\n                \/\/ Check if the post is trashed\n                $trashed_posts = get_posts(array_merge($args, ['post_status' => 'trash']));\n                if (count($trashed_posts) > 0) {\n                    \/\/ Redirect to the trashed posts list with an error message\n                    $trash_url = admin_url('edit.php?post_status=trash&post_type=post');\n                    wp_redirect($trash_url);\n                    exit;\n                } else {\n                    wp_die('You are only allowed to have one active post. Please edit your existing post.');\n                }\n            }\n        }\n    }\n}\nadd_action('admin_init', 'wpse_prevent_new_post_access');","active":true,"modified":"2024-01-19 03:15:47","revision":"8"},{"id":35,"name":"Display an admin notice if the author has trashed posts","code":"function wpse_author_trashed_post_admin_notice() {\n    if (current_user_can('author') && !current_user_can('administrator')) {\n        \/\/ Get the trashed posts for the current user\n        $user_trashed_posts = get_posts(array(\n            'author'        => get_current_user_id(),\n            'post_type'     => 'post',\n            'post_status'   => 'trash',\n            'posts_per_page'=> -1 \/\/ Retrieve all trashed posts\n        ));\n\n        \/\/ Check if there are any trashed posts\n        if (count($user_trashed_posts) > 0) {\n            \/\/ Define the URL to the trashed posts\n            $trash_url = admin_url('edit.php?post_status=trash&post_type=post');\n\n            \/\/ Display the notice\n            echo '<div class=\"notice notice-warning is-dismissible\">\n                <p><strong>Attention:<\/strong> You have trashed posts. Please <a href=\"' . esc_url($trash_url) . '\">review and restore or permanently delete<\/a> them if you wish to publish new content.<\/p>\n            <\/div>';\n        }\n    }\n}\nadd_action('admin_notices', 'wpse_author_trashed_post_admin_notice');","active":true,"modified":"2024-01-19 04:37:16","revision":"5"},{"id":36,"name":"prevent_post_deletion","code":"function wpse_prevent_post_deletion($post_id) {\n    \/\/ Check if the current user is an author and not an admin\n    if(current_user_can('author') && !current_user_can('administrator')) {\n        \/\/ Check if the post type is 'post'\n        $post = get_post($post_id);\n        if($post->post_type === 'post') {\n            \/\/ Prevent authors from trashing or deleting posts\n            \/\/ and redirect them with an error message.\n            wp_die(\n                __('You are not allowed to delete posts. Please change the post status to draft instead.', 'text-domain'),\n                __('Action not allowed', 'text-domain'),\n                array(\n                    'response' => 403,\n                    'back_link' => true \/\/ Allow user to go back to the previous page\n                )\n            );\n        }\n    }\n}\n\nadd_action('wp_trash_post', 'wpse_prevent_post_deletion');\nadd_action('before_delete_post', 'wpse_prevent_post_deletion');","active":true,"modified":"2024-01-19 04:45:05","revision":"9"},{"id":38,"name":"no media","code":"function wpse_disable_media_library_for_authors() {\n    \/\/ Check if the current user has the 'author' role and not higher capabilities\n    if (current_user_can('author') && !current_user_can('edit_others_posts')) {\n        \/\/ Get the current screen object\n        $screen = get_current_screen();\n\n        \/\/ Check if the current screen is the media library\n        if ($screen->base == 'upload') {\n            \/\/ Redirect to the dashboard with a little query argument to prevent direct linking\n            wp_redirect(admin_url('?no_access=true'));\n            exit;\n        }\n    }\n}\n\n\/\/ Action hook for admin screens\nadd_action('admin_init', 'wpse_disable_media_library_for_authors');\n\n\nfunction wpse_remove_media_menu_for_authors() {\n    if (current_user_can('author') && !current_user_can('edit_others_posts')) {\n        remove_menu_page('upload.php'); \/\/ Remove Media Management SubPanel\n    }\n}\n\nadd_action('admin_menu', 'wpse_remove_media_menu_for_authors');\n\n\nfunction wpse_disable_upload_for_authors($mime_types) {\n    \/\/ Only modify the mime types if the user is an author and cannot edit other's posts\n    if (current_user_can('author') && !current_user_can('edit_others_posts')) {\n        \/\/ Return an empty array of mime types to disallow uploading\n        return [];\n    }\n\n    \/\/ Return the original mime types if the user is not an author\n    return $mime_types;\n}\n\nadd_filter('upload_mimes', 'wpse_disable_upload_for_authors', 1, 1);\n\n\nfunction wpse_hide_admin_bar_new_media($wp_admin_bar) {\n    \/\/ Check if the current user is an author and does not have higher capabilities\n    if (current_user_can('author') && !current_user_can('edit_others_posts')) {\n        \/\/ Remove the 'Add New' media link from the admin bar\n        $wp_admin_bar->remove_node('new-media');\n    }\n}\n\nadd_action('admin_bar_menu', 'wpse_hide_admin_bar_new_media', 999);","active":true,"modified":"2024-01-19 05:11:47","revision":"4"},{"id":40,"name":"custom_fields_list_shortcode","code":"function wpse_custom_fields_list_shortcode( $atts ) {\n    \/\/ You can pass specific post ID through shortcode attributes if needed.\n    $atts = shortcode_atts( array(\n        'post_id' => get_the_ID(), \/\/ Default to the current post ID.\n    ), $atts );\n\n    $post_id = $atts['post_id'];\n    \n    \/\/ The custom fields you want to show: 'custom_field_key' => 'Custom Field Label'\n    $custom_fields = array(\n        'pof' => 'POF',\n        'zoosk' => 'Zoosk',\n        \/\/ Add more fields as needed.\n    );\n\n    \/\/ Start with an empty string to collect the list items.\n    $output = '<ul class=\"wpse-custom-fields-list\">';\n\n    \/\/ Loop through the custom fields and get their values for the specified post.\n    foreach ( $custom_fields as $key => $label ) {\n        $value = get_post_meta( $post_id, $key, true );\n\n        \/\/ Only add the list item if the custom field has a value.\n        if ( !empty( $value ) ) {\n            $output .= sprintf( '<li><strong>%s:<\/strong> %s<\/li>', esc_html( $label ), esc_html( $value ) );\n        }\n    }\n\n    \/\/ Close the unordered list.\n    $output .= '<\/ul>';\n\n    \/\/ Return the list, which will replace the shortcode when it's used.\n    return $output;\n}\n\n\/\/ Register the shortcode with WordPress.\nadd_shortcode( 'custom_fields_list', 'wpse_custom_fields_list_shortcode' );","active":true,"modified":"2024-01-19 05:21:56","revision":"3"},{"id":41,"name":"disable_quick_edit","code":"function wpse_disable_quick_edit( $actions = array(), $post = null ) {\n    \/\/ Remove the Quick Edit link\n    if (isset($actions['inline hide-if-no-js'])) {\n        unset($actions['inline hide-if-no-js']);\n    }\n    return $actions;\n}\n\n\/\/ Filter the post row actions\nadd_filter( 'post_row_actions', 'wpse_disable_quick_edit', 10, 2 );\n\n\/\/ Filter the page row actions\nadd_filter( 'page_row_actions', 'wpse_disable_quick_edit', 10, 2 );","active":true,"modified":"2024-01-19 05:55:50","revision":"2"},{"id":42,"name":"update_post_content_with_acf_field","code":"function update_post_content_with_acf_field($post_id) {\n    \/\/ Check if this is a revision or an autosave.\n    if (wp_is_post_revision($post_id) || (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE)) {\n        return;\n    }\n\n    \/\/ Check the user's permissions.\n    if (!current_user_can('edit_post', $post_id)) {\n        return;\n    }\n\n    \/\/ Get the value of the ACF field.\n    $acf_text_value = get_field('message', $post_id);\n\n    \/\/ If the ACF field has a value, update the post content.\n    if ($acf_text_value) {\n        \/\/ Remove the action to prevent infinite loops.\n        remove_action('save_post', 'update_post_content_with_acf_field');\n\n        \/\/ Update the post content.\n        wp_update_post(array(\n            'ID'           => $post_id,\n            'post_content' => $acf_text_value\n        ));\n\n        \/\/ Re-add the action for future save events.\n        add_action('save_post', 'update_post_content_with_acf_field');\n    }\n}\nadd_action('save_post', 'update_post_content_with_acf_field');","active":true,"modified":"2024-01-19 07:40:27","revision":"3"},{"id":43,"name":"hide_menu_item_if_user_has_posts","code":"function hide_menu_item_if_user_has_posts($items, $menu, $args) {\n    \/\/ The ID of the menu item you want to hide\n    $target_menu_item_id = 60; \/\/ Replace with your menu item ID\n\n    \/\/ Get the current user\n    $current_user = wp_get_current_user();\n\n    if ($current_user instanceof WP_User) {\n        \/\/ Check if the user has any posts\n        $user_posts = get_posts(array(\n            'author' => $current_user->ID,\n            'post_status' => 'any',\n            'numberposts' => 1\n        ));\n\n        \/\/ If the user has posts, we remove the target menu item\n        if ($user_posts) {\n            foreach ($items as $key => $item) {\n                if ($item->ID == $target_menu_item_id) {\n                    unset($items[$key]);\n                }\n            }\n        }\n    }\n\n    return $items;\n}\nadd_filter('wp_get_nav_menu_items', 'hide_menu_item_if_user_has_posts', 10, 3);","active":true,"modified":"2024-01-19 07:48:58","revision":"2"},{"id":45,"name":"create_post_for_new_author","code":"function create_post_for_new_author( $user_id ) {\n    \/\/ Get the user object\n    $user = get_userdata( $user_id );\n\n    \/\/ Check if the user has the 'author' role\n    if ( in_array( 'author', (array) $user->roles ) ) {\n        \/\/ Set up the new post array\n        $new_post = array(\n            'post_title'    => $user->user_login, \/\/ The title of the post is the username\n            'post_content'  => 'Please be nice. I am looking forward to reading your message.', \/\/ Default content for the post\n            'post_status'   => 'draft', \/\/ Set the status of the new post to 'draft'\n            'post_author'   => $user_id, \/\/ Set the author of the post to the new user\n            'post_type'     => 'post', \/\/ Set the type of the new post to 'post'\n        );\n\n        \/\/ Insert the post into the database\n        wp_insert_post( $new_post );\n    }\n}\n\n\/\/ Add the action that hooks the above function to user_register\nadd_action( 'user_register', 'create_post_for_new_author' );","active":true,"modified":"2024-01-21 08:38:45","revision":"10"},{"id":52,"name":"redirect_relevanssi_admin_search_to_dashboard","code":"function hide_relevanssi_admin_search_menu() {\n    \/\/ Use the parent slug for the Dashboard and the slug of the sub-menu page to remove it\n    remove_submenu_page('index.php', 'relevanssi_admin_search');\n}\n\nadd_action('admin_menu', 'hide_relevanssi_admin_search_menu', 999);\n\nadd_action('admin_menu', 'hide_relevanssi_admin_search_menu', 999);\n\nfunction redirect_relevanssi_admin_search_to_dashboard() {\n    if (is_admin() && isset($_GET['page']) && $_GET['page'] === 'relevanssi_admin_search') {\n        wp_redirect(admin_url());\n        exit;\n    }\n}\n\nadd_action('admin_init', 'redirect_relevanssi_admin_search_to_dashboard');","active":true,"modified":"2024-01-20 08:36:14","revision":"6"},{"id":54,"name":"custom_registration_honeypot_field","code":"\/\/ Add a honeypot field to the registration form\nfunction custom_registration_honeypot_field() {\n    ?>\n    <p style=\"display:none;\">\n        <label for=\"confirm_email\">Please leave this field empty<\/label>\n        <input type=\"text\" name=\"confirm_email\" id=\"confirm_email\" class=\"input\" value=\"\" size=\"25\" autocomplete=\"off\" \/>\n    <\/p>\n    <?php\n}\nadd_action('register_form', 'custom_registration_honeypot_field');\n\n\/\/ Check the honeypot field on registration\nfunction custom_check_registration_honeypot_field($errors, $sanitized_user_login, $user_email) {\n    if (!empty($_POST['confirm_email'])) {\n        $errors->add('spam_error', __('<strong>ERROR<\/strong>: Spambot detected. Registration rejected.', 'your-textdomain'));\n    }\n    return $errors;\n}\nadd_filter('registration_errors', 'custom_check_registration_honeypot_field', 10, 3);","active":true,"modified":"2024-01-20 10:16:10","revision":"2"},{"id":58,"name":"redirect_non_logged_in_users_to_login","code":"function redirect_non_logged_in_users_to_login() {\n    \/\/ Check if we're on a single post and the user is not logged in\n    if (is_single() && !is_user_logged_in()) {\n        \/\/ Get the login URL and redirect to it\n        wp_redirect(wp_login_url(get_permalink()));\n        exit;\n    }\n}\nadd_action('template_redirect', 'redirect_non_logged_in_users_to_login');","active":true,"modified":"2024-01-20 12:52:17","revision":"2"},{"id":60,"name":"block users [CLONE]","code":"function redirect_blocked_users() {\n    if (is_single()) {\n        global $post;\n        \n        \/\/ Check if the user is logged in.\n        if (is_user_logged_in()) {\n            $current_user_id = get_current_user_id();\n            $post_author_id = $post->post_author;\n            \n            \/\/ Get the blocked users from the author's ACF field.\n            $blocked_users = get_field('blocked_members', 'user_' . $post_author_id);\n\n            \/\/ Check if the current user is in the list of blocked users.\n            if (is_array($blocked_users) && in_array($current_user_id, array_column($blocked_users, 'ID'))) {\n                \/\/ Specify the URL or Page ID to redirect to.\n               \/\/ $redirect_url = home_url(); \/\/ Redirect to the home page.\n                $redirect_url = get_permalink(22); \/\/ Or redirect to a specific page by ID.\n\n                \/\/ Perform the redirect.\n                wp_redirect($redirect_url);\n                exit; \/\/ Always call exit after wp_redirect.\n            }\n        }\n    }\n}\n\nadd_action('template_redirect', 'redirect_blocked_users');\n\n\n\nfunction exclude_current_user_from_blocked_members_field($args, $field, $post_id) {\n    \/\/ Get the current user's ID to exclude it from the User field.\n    $current_user_id = get_current_user_id();\n\n    \/\/ Add an 'exclude' argument to the query.\n    $args['exclude'] = array($current_user_id);\n\n    return $args;\n}\n\nadd_filter('acf\/fields\/user\/query\/name=blocked_members', 'exclude_current_user_from_blocked_members_field', 10, 3);","active":true,"modified":"2024-01-21 01:56:34","revision":"52"},{"id":62,"name":"matching 3","desc":"display_custom_field_if_user_has_same(get_the_ID(), 'your_custom_field_key', 'specific-term-slug');","code":"function display_custom_fields_if_user_has_same_and_term_matches($current_post_id, $custom_fields_with_terms) {\n    \/\/ Check if the user is logged in\n    if (!is_user_logged_in()) {\n        return;\n    }\n\n    \/\/ Get the current logged-in user's ID\n    $user_id = get_current_user_id();\n    \n    \/\/ Get all posts by the user\n    $user_posts = get_posts(array(\n        'author'        => $user_id,\n        'post_type'     => 'post',\n        'posts_per_page'=> -1, \/\/ to get all user posts\n        'fields'        => 'ids', \/\/ only get post IDs to optimize the query\n    ));\n\n    \/\/ Flag to check if there is at least one match\n    $has_match = false;\n\n    \/\/ Start an unordered list\n    echo \"<ul>\";\n\n    \/\/ Check the user's posts for each of the custom fields\n    foreach ($custom_fields_with_terms as $custom_field => $term_and_label) {\n        $user_has_custom_field = false;\n        foreach ($user_posts as $user_post_id) {\n            if (get_post_meta($user_post_id, $custom_field, true) != '') {\n                $user_has_custom_field = true;\n                break;\n            }\n        }\n\n        \/\/ If the user has the custom field, check the current post for the term\n        if ($user_has_custom_field && has_term($term_and_label['term'], 'post_tag', $current_post_id)) {\n            \/\/ Get the custom field value of the current post\n            $value = get_post_meta($current_post_id, $custom_field, true);\n            if (!empty($value)) {\n                \/\/ Display the custom field value with label in a list item\n                echo \"<li><strong>\" . esc_html($term_and_label['label']) . \":<\/strong> \" . esc_html($value) . \"<\/li>\";\n                $has_match = true;\n            }\n        }\n    }\n\n    \/\/ If no match was found, display \"No match\"\n    if (!$has_match) {\n        echo \"<li><em>No matching websites\/apps<\/em><\/li>\";\n        \/\/ If we are on a single post page, redirect\n        if (is_single()) {\n            $redirect_url = home_url(); \/\/ Modify this to your desired URL\n            wp_redirect($redirect_url);\n            exit; \/\/ Always call exit immediately after wp_redirect()\n        }\n    }\n\n    \/\/ End the unordered list\n    echo \"<\/ul>\";\n}","active":true,"modified":"2024-01-28 15:17:17","revision":"36"},{"id":67,"name":"Shortcode to display current author's comments","desc":"<p>https:\/\/poe.com\/s\/PpPURD1cnUbV9i81XQWc<\/p>","code":"\/**\n * Shortcode to display current author's comments with post title and date\/time\n *\/\nfunction current_author_comments_shortcode( $atts ) {\n    \/\/ Get the current user's ID\n    $current_user_id = get_current_user_id();\n\n    \/\/ Query comments by the current author\n    $comments = get_comments( array(\n        'user_id' => $current_user_id,\n        'status'  => 'approve',\n    ) );\n\n    \/\/ Initialize the output variable\n    $output = '';\n\n    \/\/ Loop through each comment\n    foreach ( $comments as $comment ) {\n        \/\/ Get the post ID\n        $post_id = $comment->comment_post_ID;\n\n        \/\/ Get the post title and link\n        $post_title = '<a href=\"' . get_permalink( $post_id ) . '\">' . get_the_title( $post_id ) . '<\/a>';\n\n        \/\/ Get the comment date and time\n        $comment_date = get_comment_date( get_option( 'date_format' ), $comment );\n        $comment_time = date_i18n( get_option( 'time_format' ), strtotime( $comment->comment_date ) );\n\n        \/\/ Append the comment details to the output\n        $output .= '<li>';\n        $output .= sprintf( '<strong>%s:<\/strong> %s', $post_title, $comment->comment_content );\n        $output .= sprintf( ' <em>(%s at %s)<\/em>', $comment_date, $comment_time );\n        $output .= '<\/li>';\n    }\n\n    return $output;\n}\nadd_shortcode( 'current_author_comments', 'current_author_comments_shortcode' );","active":true,"modified":"2024-01-21 16:57:48","revision":"24"},{"id":66,"name":"customize_dashboard_widgets","code":"\/\/ Hook into the 'wp_dashboard_setup' action to register our custom functions\nadd_action('wp_dashboard_setup', 'customize_dashboard_widgets');\n\nfunction customize_dashboard_widgets() {\n\n    \/\/ First, remove all existing dashboard widgets\n    global $wp_meta_boxes;\n    unset($wp_meta_boxes['dashboard']['normal']['core']);\n    unset($wp_meta_boxes['dashboard']['side']['core']);\n    unset($wp_meta_boxes['dashboard']['column3']['core']);\n    unset($wp_meta_boxes['dashboard']['column4']['core']);\n\n    \/\/ Next, add our custom dashboard widget\n    wp_add_dashboard_widget(\n        'custom_dashboard_widget', \/\/ Widget slug.\n        'Welcome', \/\/ Title.\n        'custom_dashboard_widget_content' \/\/ Display function.\n    );\n}\n\n\/\/ The output of our custom dashboard widget\nfunction custom_dashboard_widget_content() {\n    \/\/ Get the current user\n    $user = wp_get_current_user();\n\n    \/\/ Query for the first post or draft of the user\n    $args = array(\n        'author' => $user->ID,\n        'post_type' => 'post',\n        'post_status' => array('publish', 'draft'),\n        'posts_per_page' => 1,\n        'orderby' => 'date',\n        'order' => 'ASC'\n    );\n    $user_posts = new WP_Query($args);\n\n    \/\/ Check if the user has posts or drafts and output the edit link for the first one\n    if ($user_posts->have_posts()) {\n        $user_posts->the_post();\n        echo '<p>Hello ' . esc_html($user->display_name) . '.<br \/>Your first step is to complete (and publish) your post with all your website\/app details. After that you can go searching for others on the same sites\/apps and send them a free message. <\/p>';\n        echo '<p><a href=\"' . esc_url(get_edit_post_link()) . '\" class=\"button button-primary\">Edit Your Post<\/a> <a href=\"https:\/\/usernames.au\/wp-admin\/profile.php\" class=\"button button-secondary\">Profile<\/a> &bull; <a href=\"' . esc_url(home_url('\/')) . '\" class=\"button button-secondary\">Home<\/a> <a href=\"' . esc_url(home_url('\/?page_id=162')) . '\" class=\"button button-secondary\">FAQs<\/a> <a href=\"' . esc_url(home_url('\/?p=324')) . '\" class=\"button button-secondary\">Contact<\/a><\/p>';\n        wp_reset_postdata();\n    } else {\n        \/\/ If no posts or drafts, provide a link to create a new post\n        echo '<p>Hello ' . esc_html($user->display_name) . '! It looks like you don\u2019t have a post yet. Your first step is to create your post with all your website details. After that you can go searching for others on the same  sites and send them a free message. <\/p>';\n        echo '<p><a href=\"' . esc_url(admin_url('post-new.php')) . '\" class=\"button button-primary\">Create Your First Post<\/a> <a href=\"' . esc_url(home_url('\/')) . '\" class=\"button button-secondary\">Home<\/a><\/p>';\n    }\n}","active":true,"modified":"2024-01-28 04:14:46","revision":"64"},{"id":68,"name":"delete_old_comments_exclude_admin_and_posts","code":"function delete_old_comments_exclude_admin_and_posts() {\n    global $wpdb;\n    $days = 7;\n    $admin_user_id = 1; \/\/ Replace with the actual admin user ID\n\n    $wpdb->query(\n        $wpdb->prepare(\n            \"DELETE FROM $wpdb->comments \n            WHERE comment_date < %s \n            AND user_id <> %d \n            AND comment_post_ID NOT IN (SELECT ID FROM $wpdb->posts WHERE post_author = %d)\",\n            date_i18n('Y-m-d H:i:s', strtotime(\"-$days days\")),\n            $admin_user_id,\n            $admin_user_id\n        )\n    );\n}\n\n\/\/ Schedule the function to run daily, if it's not already scheduled\nif (!wp_next_scheduled('delete_old_comments_exclude_admin_and_posts_cron')) {\n    wp_schedule_event(time(), 'daily', 'delete_old_comments_exclude_admin_and_posts_cron');\n}\nadd_action('delete_old_comments_exclude_admin_and_posts_cron', 'delete_old_comments_exclude_admin_and_posts');","active":true,"modified":"2024-01-23 09:58:09","revision":"2"},{"id":69,"name":"add_class_to_users_posts","code":"function add_class_to_users_posts($classes, $class, $post_id) {\n    if (is_user_logged_in()) { \/\/ Check if user is logged in\n        $current_user = wp_get_current_user();\n        $post = get_post($post_id);\n        if ($post->post_author == $current_user->ID) {\n            \/\/ Add custom class if the logged-in user is the author of the post\n            $classes[] = 'current-user-post';\n        }\n    }\n    return $classes;\n}\nadd_filter('post_class', 'add_class_to_users_posts', 10, 3);","active":true,"modified":"2024-01-23 11:22:01","revision":"2"},{"id":75,"name":"exclude_admin_post_from_queries","code":"function exclude_specific_post_from_queries( $query ) {\n    if ( ! is_admin() && $query->is_main_query() ) {\n        $post_id = 324; \/\/ Replace with the ID of the post to exclude.\n        $query->set( 'post__not_in', array( $post_id ) );\n    }\n}\nadd_action( 'pre_get_posts', 'exclude_specific_post_from_queries' );","active":true,"modified":"2024-01-24 07:21:48","revision":"2"},{"id":76,"name":"custom_login_logo","code":"function custom_login_branding() {\n    ?>\n    <style type=\"text\/css\">\n        \/* Hide the existing logo *\/\n        #login h1 a, .login h1 a {\n            display: none;\n        }\n        \/* Style the custom title and message *\/\n        #login h1.custom-branding {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n        #login h1.custom-branding h1 {\n            color: #555; \/* Change the color to suit your theme *\/\n            font-size: 24px; \/* Adjust the size as needed *\/\n        }\n        #login h1.custom-branding p {\n            color: #777; \/* Change the color to suit your theme *\/\n            margin-top: 10px;\n        }\n    <\/style>\n    <script type=\"text\/javascript\">\n        document.addEventListener('DOMContentLoaded', function () {\n            var loginForm = document.getElementById('login');\n            var customBranding = document.createElement('div');\n            customBranding.innerHTML = '<a href=\"https:\/\/usernames.au\" style=\"color:#333; text-decoration:none;\"><h1>USERNAMES.AU<\/h1><\/a><p style=\"text-align:center;margin-bottom:10px;\">free messaging for paid websites<\/p>';\n            customBranding.classList.add('custom-branding');\n\n            \/\/ Insert the custom branding before the login form\n            loginForm.insertBefore(customBranding, loginForm.firstChild);\n        });\n    <\/script>\n    <?php\n}\nadd_action('login_enqueue_scripts', 'custom_login_branding');","active":true,"modified":"2024-01-28 05:03:00","revision":"21"},{"id":71,"name":"get_current_user_first_post_link in menu","code":"\/\/ Function to replace a placeholder URL with the first post link in menu items\nfunction replace_placeholder_with_first_post_link($items, $args) {\n    \/\/ Only run this on the front end\n    if (is_admin()) {\n        return $items;\n    }\n\n    foreach ($items as &$item) {\n        \/\/ Check for the specific placeholder in the menu item URL\n        if (strpos($item->url, '#firstpostlink') !== false) {\n            $first_post_link = get_current_user_first_post_link();\n            if (!empty($first_post_link)) {\n                \/\/ Replace the placeholder with the actual URL\n                $item->url = $first_post_link;\n            } else {\n                \/\/ Optionally hide the menu item if there is no first post\n                $item->url = '';\n                $item->_invalid = true;\n            }\n        }\n    }\n\n    return $items;\n}\n\n\/\/ Add the custom filter to wp_get_nav_menu_items\nadd_filter('wp_get_nav_menu_items', 'replace_placeholder_with_first_post_link', 10, 2);\n\n\/\/ Function to get the permalink of the first post of the logged-in user\nfunction get_current_user_first_post_link() {\n    if (is_user_logged_in()) {\n        $current_user_id = get_current_user_id(); \/\/ Get the current user ID\n\n        $args = array(\n            'author' => $current_user_id, \/\/ Get posts from current user\n            'orderby' => 'date', \/\/ Order by date\n            'order' => 'ASC', \/\/ Start with the oldest post\n            'posts_per_page' => 1, \/\/ Only fetch the first post\n            'post_status' => 'publish', \/\/ Only get published posts\n        );\n\n        $user_posts = get_posts($args); \/\/ Fetch the posts\n\n        if (!empty($user_posts)) {\n            return get_permalink($user_posts[0]->ID); \/\/ Return the permalink of the first post\n        }\n    }\n\n    return ''; \/\/ Return empty string if no posts or not logged in\n}","active":true,"modified":"2024-01-23 22:17:26","revision":"10"},{"id":72,"name":"menu_item_description","code":"add_filter( 'walker_nav_menu_start_el', 'tu_menu_item_description', 10, 4 );\nfunction tu_menu_item_description( $item_output, $item, $depth, $args ) \n{\n\t\/\/ If we're working with the primary or secondary theme locations\n\tif ( 'primary' == $args->theme_location || 'secondary' == $args->theme_location || 'slideout' == $args->theme_location ) {\n\t\t$item_output = str_replace( $args->link_after . '<\/a>', $args->link_after . '<\/span><span class=\"description\">' . $item->description . '<\/span><\/a>', $item_output );\n\t}\n\t\n\t\/\/ Return the output\n\treturn $item_output;\n}","active":true,"modified":"2024-01-23 22:00:35","revision":"2"},{"id":74,"name":"restrict_author_backend_comments","code":"function restrict_author_backend_comments() {\n    \/\/ Check if the current user is an author\n    if (current_user_can('author')) {\n        \/\/ Check if we are in the admin area and on the comments page or attempting to access comments-related pages\n        global $pagenow;\n        if ($pagenow === 'edit-comments.php' || $pagenow === 'comment.php') {\n            wp_die(__('You do not have permission to access this page.')); \/\/ Display a message and terminate execution\n        }\n        \n        \/\/ Remove comments menu item for authors\n        function remove_comments_menu_item() {\n            remove_menu_page('edit-comments.php');\n        }\n        add_action('admin_menu', 'remove_comments_menu_item');\n        \n        \/\/ Optionally hide comments from the dashboard\n        function remove_dashboard_comments_widget() {\n            remove_meta_box('dashboard_recent_comments', 'dashboard', 'normal');\n        }\n        add_action('wp_dashboard_setup', 'remove_dashboard_comments_widget');\n    }\n}\nadd_action('admin_init', 'restrict_author_backend_comments');","active":true,"modified":"2024-01-24 03:15:18","revision":"4"},{"id":79,"name":"post edit status text","code":"function my_custom_admin_footer_text() {\n    global $post;\n    \/\/ Check if we're on the post edit page and if the post is published. https:\/\/poe.com\/s\/NMn92bl4oIG6tSOymI4S\n    if (get_current_screen()->id === 'post' && $post->post_status === 'publish') {\n        ?>\n        <script type=\"text\/javascript\">\n            jQuery(document).ready(function($) {\n                \/\/ This selector finds the \"Status: Published\" text.\n                \/\/ You may need to adjust the selector to target the specific element correctly.\n                var statusElement = $('#misc-publishing-actions .misc-pub-section.misc-pub-post-status');\n                \n                if (statusElement.length > 0) {\n                    \/\/ Insert your custom text below the \"Status: Published\" text.\n                    $('<div class=\"custom-status-text\">To hide your post from everyone, click edit and change your status from <strong>Published<\/strong> to <strong>Draft<\/strong>, then click Update.<\/div>').insertAfter(statusElement);\n                }\n            });\n        <\/script>\n        <?php\n    }\n}\n\n\/\/ Hook into the admin footer.\nadd_action('admin_footer', 'my_custom_admin_footer_text');\n\n\n\n\n\n\n\nfunction my_custom_admin_footer_text2() {\n    global $post;\n    \/\/ Check if we're on the post edit page and if the post is published. https:\/\/poe.com\/s\/NMn92bl4oIG6tSOymI4S\n    if (get_current_screen()->id === 'post' && $post->post_status === 'draft') {\n        ?>\n        <script type=\"text\/javascript\">\n            jQuery(document).ready(function($) {\n                \/\/ This selector finds the \"Status: Published\" text.\n                \/\/ You may need to adjust the selector to target the specific element correctly.\n                var statusElement = $('#misc-publishing-actions .misc-pub-section.misc-pub-post-status');\n                \n                if (statusElement.length > 0) {\n                    \/\/ Insert your custom text below the \"Status: Published\" text.\n                    $('<div class=\"custom-status-text\">To <strong>UNhide<\/strong> your post (and make it visible, just click <strong>Publish<\/strong>.<\/div>').insertAfter(statusElement);\n                }\n            });\n        <\/script>\n        <?php\n    }\n}\n\n\/\/ Hook into the admin footer.\nadd_action('admin_footer', 'my_custom_admin_footer_text2');\n\n\n\n\nfunction remove_pending_review_option() {\n    global $pagenow;\n    \/\/ Check if we're on the post edit page - https:\/\/poe.com\/s\/EzRYyfhUKBKa4avZYs6L\n    if ($pagenow == 'post.php' || $pagenow == 'post-new.php') {\n        ?>\n        <script type=\"text\/javascript\">\n            jQuery(document).ready(function($) {\n                \/\/ Remove the \"Pending Review\" option from the \"Status\" dropdown.\n                $(\"#post_status option[value='pending']\").remove();\n                \n                \/\/ If you also want to remove it from the \"Quick Edit\" on the posts list, uncomment the following line:\n                \/\/ $('select[name=\"_status\"] option[value=\"pending\"]').remove();\n            });\n        <\/script>\n        <?php\n    }\n}\n\n\/\/ Hook into the admin footer to output the script.\nadd_action('admin_footer', 'remove_pending_review_option');","active":true,"modified":"2024-01-28 15:02:17","revision":"29"},{"id":78,"name":"custom text to the registration form","code":"\/\/ Hook that adds custom text to the registration form\nfunction my_custom_registration_text() {\n    $custom_text = \"<p class='custom-text'>Your username can't be changed and will be visible to everyone. Your email will be private.<br \/><br \/><\/p>\";\n    echo $custom_text;\n}\n\n\/\/ Add the above function to the 'register_form' action hook\nadd_action('register_form', 'my_custom_registration_text');\n\n\/\/ Optional: Use this section to enqueue styles if you want to style your custom text.\nfunction my_custom_registration_text_styles() {\n    wp_enqueue_style( 'my-custom-registration-styles', plugins_url( 'css\/custom-registration-styles.css', __FILE__ ) );\n}\n\n\/\/ Hook the styles function onto the login_enqueue_scripts action\nadd_action( 'login_enqueue_scripts', 'my_custom_registration_text_styles' );","active":true,"modified":"2024-01-28 04:55:46","revision":"16"}]}